/* si_stack.template
 * Purpose: Class-like template generation using preprocessor #defines
 * Created: 20250612
 * Updated: 20250612
//*/

#include "si_stack.h"

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

#ifdef SI_TEMPLATE_TYPE

// Used to represent a preprocessor defined value as a string.
#ifndef _STRINGIFY
#define _STRINGIFY(s) #s
#define DEFINED__STRINGIFY
#endif
#ifndef STRINGIFY
#define STRINGIFY(s) _STRINGIFY(s)
#define DEFINED_STRINGIFY
#endif

// Used to join/concat two defined preprocessor tokens without converting to a string
#ifndef PASTE_TWO_TOKENS
#define PASTE_TWO_TOKENS(token_1, token_2) token_1 ## token_2
#define DEFINED_PASTE_TWO_TOKENS
#endif
#ifndef PASTE_TWO_TOKENS_INDIRECT
#define PASTE_TWO_TOKENS_INDIRECT(token_1, token_2) PASTE_TWO_TOKENS(token_1 , token_2)
#define DEFINED_PASTE_TWO_TOKENS_INDIRECT
#endif

// Used to generate function/struct type names using provided template_type
#ifdef SI_TEMPLATE_FUNCTION
#undef SI_TEMPLATE_FUNCTION
#endif
#define SI_TEMPLATE_FUNCTION(B, E) \
	PASTE_TWO_TOKENS_INDIRECT(B, \
	PASTE_TWO_TOKENS_INDIRECT(SI_TEMPLATE_TYPE, E))


typedef struct si_stack_t SI_TEMPLATE_FUNCTION(, _stack_t);

static inline void SI_TEMPLATE_FUNCTION(, _stack_new_2)(
	SI_TEMPLATE_FUNCTION(, _stack_t)* p_stack, const size_t initial_capacity)
{
	si_stack_new_3(p_stack, sizeof(SI_TEMPLATE_TYPE), initial_capacity);
}
static inline void SI_TEMPLATE_FUNCTION(, _stack_new)(
	SI_TEMPLATE_FUNCTION(, _stack_t)* p_stack)
{
	si_stack_new(p_stack, sizeof(SI_TEMPLATE_TYPE));
}

static inline bool SI_TEMPLATE_FUNCTION(, _stack_is_full)(
	const SI_TEMPLATE_FUNCTION(, _stack_t)* p_stack)
{
	return si_stack_is_full(p_stack);
}

static inline bool SI_TEMPLATE_FUNCTION(, _stack_is_empty)(
	const SI_TEMPLATE_FUNCTION(, _stack_t)* p_stack)
{
	return si_stack_is_empty(p_stack);
}

static inline void SI_TEMPLATE_FUNCTION(, _stack_push)(
	SI_TEMPLATE_FUNCTION(, _stack_t)* p_stack, const SI_TEMPLATE_TYPE item)
{
	si_stack_push(p_stack, &item);
}

static SI_TEMPLATE_TYPE SI_TEMPLATE_FUNCTION(, _stack_pop)(
	SI_TEMPLATE_FUNCTION(, _stack_t)* p_stack)
{
	SI_TEMPLATE_TYPE value;
	si_stack_pop(p_stack, &value);
	return value;
}

static inline void SI_TEMPLATE_FUNCTION(, _stack_free)(
	SI_TEMPLATE_FUNCTION(, _stack_t)* p_stack)
{
	si_stack_free(p_stack);
}


// Clean up our preprocessor defines.
#undef SI_TEMPLATE_FUNCTION

// Only undefine these functions if they weren't already defined
// Done in the reverse order of their definition.
#ifdef DEFINED_PASTE_TWO_TOKENS_INDIRECT
#undef PASTE_TWO_TOKENS_INDIRECT
#undef DEFINED_PASTE_TWO_TOKENS_INDIRECT
#endif

#ifdef DEFINED_PASTE_TWO_TOKENS
#undef PASTE_TWO_TOKENS
#undef DEFINED_PASTE_TWO_TOKENS
#endif

#ifdef DEFINED_STRINGIFY
#undef STRINGIFY
#undef DEFINED_STRINGIFY
#endif

#ifdef DEFINED__STRINGIFY
#undef _STRINGIFY
#undef DEFINED__STRINGIFY
#endif

#undef SI_TEMPLATE_TYPE

#else

// Handle undefined template type.
#error "Template was included without a defined template type(SI_TEMPLATE_TYPE)."

#endif//SI_TEMPLATE_TYPE

#ifdef __cplusplus
}
#endif //__cplusplus
