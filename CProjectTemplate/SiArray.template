/* SiArray.template
 * Language: C
 * Authors: ScorpionInc
 * Purpose: Generates functions/typedefs for SiArray when provided a type via preprocessor #define.
 * Created: 20250430
 * Updated: 20250501
//*/

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

// *WARNING* Can't support nested templates.
#ifdef SI_TEMPLATE_TYPE

// Reference: https://stackoverflow.com/a/12844500
// Used to represent a preprocessor defined value as a string.
#ifndef _STRINGIFY
#define _STRINGIFY(s) #s
#define DEFINED__STRINGIFY
#endif
#ifndef STRINGIFY
#define STRINGIFY(s) _STRINGIFY(s)
#define DEFINED_STRINGIFY
#endif

// Reference: https://www.renenyffenegger.ch/notes/development/languages/C-C-plus-plus/preprocessor/macros/token-paste-operator/index
// Used to join/concat two defined preprocessor tokens without converting to a string
#ifndef PASTE_TWO_TOKENS
#define PASTE_TWO_TOKENS(token_1, token_2) token_1 ## token_2
#define DEFINED_PASTE_TWO_TOKENS
#endif
#ifndef PASTE_TWO_TOKENS_INDIRECT
#define PASTE_TWO_TOKENS_INDIRECT(token_1, token_2) PASTE_TWO_TOKENS(token_1 , token_2)
#define DEFINED_PASTE_TWO_TOKENS_INDIRECT
#endif

// Used to generate function/struct type names using provided template_type
#ifdef SI_TEMPLATE_FUNCTION
#undef SI_TEMPLATE_FUNCTION
#endif
#define SI_TEMPLATE_FUNCTION(B, E) PASTE_TWO_TOKENS_INDIRECT(B, PASTE_TWO_TOKENS_INDIRECT(SI_TEMPLATE_TYPE, E))

#include "SiArray.h"

typedef struct SiArray SI_TEMPLATE_FUNCTION(, Array);

static inline void SI_TEMPLATE_FUNCTION(, Array_freeAt)(SI_TEMPLATE_FUNCTION(, Array)* address) { SiArray_freeAt(address); }

// Initializes array at address with element size of SI_TEMPLATE_TYPE
static inline void SI_TEMPLATE_FUNCTION(, Array_new4)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int _capacity, const enum SiArrayGrowMethod _growMethod, const float _growRate){
	SiArray_new5(address, sizeof(SI_TEMPLATE_TYPE), _capacity, _growMethod, _growRate);
}
// Helper Function
static inline void SI_TEMPLATE_FUNCTION(, Array_new3)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int _capacity, const enum SiArrayGrowMethod _growMethod){
	SiArray_new4(address, sizeof(SI_TEMPLATE_TYPE), _capacity, _growMethod);
}
// Helper Function
static inline void SI_TEMPLATE_FUNCTION(, Array_new2)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int _capacity){
	SiArray_new3(address, sizeof(SI_TEMPLATE_TYPE), _capacity);
}
// Helper Function
static inline void SI_TEMPLATE_FUNCTION(, Array_new)(SI_TEMPLATE_FUNCTION(, Array)* address){
	SiArray_new(address, sizeof(SI_TEMPLATE_TYPE));
}

static inline bool SI_TEMPLATE_FUNCTION(, Array_pointsToData)(SI_TEMPLATE_FUNCTION(, Array)* address, const void* pointer){ return SiArray_pointsToData(address, pointer); }
static inline bool SI_TEMPLATE_FUNCTION(, Array_pointsToDataElement)(SI_TEMPLATE_FUNCTION(, Array)* address, const void* pointer){ return SiArray_pointsToDataElement(address, pointer); }
static inline bool SI_TEMPLATE_FUNCTION(, Array_isValidPointer)(SI_TEMPLATE_FUNCTION(, Array)* address, const void* pointer){ return SiArray_isValidPointer(address, pointer); }

static inline SI_TEMPLATE_TYPE* SI_TEMPLATE_FUNCTION(, Array_getElementAt)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int index){
	return (SI_TEMPLATE_TYPE*)SiArray_getElementAt(address, index);
}
static inline SI_TEMPLATE_TYPE* SI_TEMPLATE_FUNCTION(, Array_first)(SI_TEMPLATE_FUNCTION(, Array)* address){
	return (SI_TEMPLATE_TYPE*)SiArray_first(address);
}
static inline SI_TEMPLATE_TYPE* SI_TEMPLATE_FUNCTION(, Array_last)(SI_TEMPLATE_FUNCTION(, Array)* address){
	return (SI_TEMPLATE_TYPE*)SiArray_last(address);
}

static inline unsigned int SI_TEMPLATE_FUNCTION(, Array_nextGrowAmount)(SI_TEMPLATE_FUNCTION(, Array)* address){ return SiArray_nextGrowAmount(address); }
static inline unsigned int SI_TEMPLATE_FUNCTION(, Array_nextShrinkAmount)(SI_TEMPLATE_FUNCTION(, Array)* address){ return SiArray_nextShrinkAmount(address); }

static inline bool SI_TEMPLATE_FUNCTION(, Array_growBy)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int growAmount){ return SiArray_growBy(address, growAmount); }
static inline bool SI_TEMPLATE_FUNCTION(, Array_growTo)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int newLargerCapacity){ return SiArray_growTo(address, newLargerCapacity); }
static inline bool SI_TEMPLATE_FUNCTION(, Array_grow)(SI_TEMPLATE_FUNCTION(, Array)* address){ return SiArray_grow(address); }

static inline bool SI_TEMPLATE_FUNCTION(, Array_appendAt)(SI_TEMPLATE_FUNCTION(, Array)* address, const void* value){ return SiArray_appendAt(address, value); }
bool SI_TEMPLATE_FUNCTION(, Array_append)(SI_TEMPLATE_FUNCTION(, Array)* address, const SI_TEMPLATE_TYPE value){
	return SiArray_appendAt(address, &value);
}

static inline bool SI_TEMPLATE_FUNCTION(, Array_shrinkBy)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int shrinkAmount){ return SiArray_shrinkBy(address, shrinkAmount); }
static inline bool SI_TEMPLATE_FUNCTION(, Array_shrinkTo)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int newSmallerCapacity){ return SiArray_shrinkTo(address, newSmallerCapacity); }
static inline bool SI_TEMPLATE_FUNCTION(, Array_shrink)(SI_TEMPLATE_FUNCTION(, Array)* address){ return SiArray_shrink(address); }
static inline unsigned int SI_TEMPLATE_FUNCTION(, Array_shrinkToFit)(SI_TEMPLATE_FUNCTION(, Array)* address){ return SiArray_shrinkToFit(address); }

static inline bool SI_TEMPLATE_FUNCTION(, Array_setCapacityTo)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int targetCount){ return SiArray_setCapacityTo(address, targetCount); }

static inline bool SI_TEMPLATE_FUNCTION(, Array_removeBackBy)(SI_TEMPLATE_FUNCTION(, Array)* address, const unsigned int amount){ return SiArray_removeBackBy(address, amount); }
static inline bool SI_TEMPLATE_FUNCTION(, Array_removeBack)(SI_TEMPLATE_FUNCTION(, Array)* address){ return SiArray_removeBack(address); }
static inline bool SI_TEMPLATE_FUNCTION(, Array_clear)(SI_TEMPLATE_FUNCTION(, Array)* address){ return SiArray_clear(address); }
static inline bool SI_TEMPLATE_FUNCTION(, Array_empty)(SI_TEMPLATE_FUNCTION(, Array)* address){ return SiArray_empty(address); }

// Clean up our preprocessor defines.
#undef SI_TEMPLATE_FUNCTION

// Only undefine these functions if they weren't defined else where(They might be using them(?))
// Done in the reverse order of their definition.
#ifdef DEFINED_PASTE_TWO_TOKENS_INDIRECT
#undef PASTE_TWO_TOKENS_INDIRECT
#undef DEFINED_PASTE_TWO_TOKENS_INDIRECT
#endif

#ifdef DEFINED_PASTE_TWO_TOKENS
#undef PASTE_TWO_TOKENS
#undef DEFINED_PASTE_TWO_TOKENS
#endif

#ifdef DEFINED_STRINGIFY
#undef STRINGIFY
#undef DEFINED_STRINGIFY
#endif

#ifdef DEFINED__STRINGIFY
#undef _STRINGIFY
#undef DEFINED__STRINGIFY
#endif

#undef SI_TEMPLATE_TYPE

#else

// Handle undefined template type.
#error "Template was included without a defined template type(SI_TEMPLATE_TYPE)."

#endif//SI_TEMPLATE_TYPE

#ifdef __cplusplus
}
#endif //__cplusplus
